name: Continuous Integration Pipeline

on:
 workflow_dispatch

permissions:
 contents: read
 actions: read
 checks: write
 pull-requests: write

jobs:
 build-and-test:
   runs-on: ubuntu-latest

   strategy:
     matrix:
       node-version: [18.x, 20.x]

   steps:
     - name: Checkout code
       uses: actions/checkout@v4

     - name: Setup Node.js ${{ matrix.node-version }}
       uses: actions/setup-node@v4
       with:
         node-version: ${{ matrix.node-version }}
         cache: 'npm'
         cache-dependency-path: 'package-lock.json'

     - name: Install dependencies
       run: npm ci

     - name: Build the application (optional)
       run: |
         npm run build 2>/dev/null || echo "No build script found, skipping build step"

     - name: Run unit tests with coverage and JUnit reports
       env:
         JEST_JUNIT_OUTPUT: coverage/junit.xml
       run: npm run test:ci

     - name: Publish test results to Checks
       uses: dorny/test-reporter@v1
       if: always()
       with:
         name: Jest Test Results
         path: coverage/junit.xml
         reporter: jest-junit
         fail-on-error: true

     - name: Upload test results to GitHub
       uses: actions/upload-artifact@v4
       if: always()
       with:
         name: test-results-node-${{ matrix.node-version }}
         path: coverage/
         retention-days: 30

     - name: Create deployment package
       run: |
         set -euo pipefail
         STAGING="$GITHUB_WORKSPACE/deployment-package"
         rm -rf "$STAGING"
         mkdir -p "$STAGING"

         [ -d public ] && cp -r public "$STAGING/" || echo "No public/ directory found"
         [ -d node_modules ] && cp -r node_modules "$STAGING/" || echo "No node_modules/ directory found"
         [ -f server.js ] && cp server.js "$STAGING/" || echo "No server.js found"
         cp package.json "$STAGING/"
         cp package-lock.json "$STAGING/"
         [ -f README.md ] && cp README.md "$STAGING/" || true
         [ -f Dockerfile ] && cp Dockerfile "$STAGING/" || echo "No Dockerfile found"

         (cd "$STAGING" && npm pkg delete devDependencies || true)

         TS="$(date +%Y%m%d-%H%M%S)"
         SHORT_SHA="${GITHUB_SHA::7}"
         ZIP_NAME="deployment-package-${SHORT_SHA}-${TS}.zip"
         (cd "$GITHUB_WORKSPACE" && zip -r "$ZIP_NAME" "deployment-package")
         echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

     - name: Upload deployment package artifact
       uses: actions/upload-artifact@v4
       with:
         name: deployment-package-node-${{ matrix.node-version }}-${{ github.run_number }}
         path: ${{ env.ZIP_NAME }}
         retention-days: 90

